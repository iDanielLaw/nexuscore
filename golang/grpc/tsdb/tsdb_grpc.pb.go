// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: tsdb.proto

package tsdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TSDBService_Put_FullMethodName                = "/tsdb.TSDBService/Put"
	TSDBService_PutBatch_FullMethodName           = "/tsdb.TSDBService/PutBatch"
	TSDBService_Get_FullMethodName                = "/tsdb.TSDBService/Get"
	TSDBService_Delete_FullMethodName             = "/tsdb.TSDBService/Delete"
	TSDBService_DeleteSeries_FullMethodName       = "/tsdb.TSDBService/DeleteSeries"
	TSDBService_DeletesByTimeRange_FullMethodName = "/tsdb.TSDBService/DeletesByTimeRange"
	TSDBService_Query_FullMethodName              = "/tsdb.TSDBService/Query"
	TSDBService_CreateSnapshot_FullMethodName     = "/tsdb.TSDBService/CreateSnapshot"
	TSDBService_GetSeriesByTags_FullMethodName    = "/tsdb.TSDBService/GetSeriesByTags"
	TSDBService_Subscribe_FullMethodName          = "/tsdb.TSDBService/Subscribe"
	TSDBService_ForceFlush_FullMethodName         = "/tsdb.TSDBService/ForceFlush"
)

// TSDBServiceClient is the client API for TSDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TSDBService defines the gRPC service for Time Series Database operations.
type TSDBServiceClient interface {
	// Put stores a new data point or a structured event for a time series. (FR1.1)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// PutBatch stores a batch of new data points.
	PutBatch(ctx context.Context, in *PutBatchRequest, opts ...grpc.CallOption) (*PutBatchResponse, error)
	// Get retrieves a single data point at a specific timestamp. (FR1.3)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Delete marks a single data point for deletion. (FR1.2)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// DeleteSeries marks an entire series for deletion. (FR1.5)
	DeleteSeries(ctx context.Context, in *DeleteSeriesRequest, opts ...grpc.CallOption) (*DeleteSeriesResponse, error)
	// DeleteDataPointsByTimeRange marks a time range within a series for deletion. (FR1.2)
	DeletesByTimeRange(ctx context.Context, in *DeletesByTimeRangeRequest, opts ...grpc.CallOption) (*DeletesByTimeRangeResponse, error)
	// Query retrieves data points or aggregated results for a specified time range. (FR1.4)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResult], error)
	// CreateSnapshot triggers the creation of a database snapshot. (FR5.2)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	// GetSeriesByTags retrieves a list of unique series identifiers that match the given criteria. (FR1.6)
	GetSeriesByTags(ctx context.Context, in *GetSeriesByTagsRequest, opts ...grpc.CallOption) (*GetSeriesByTagsResponse, error)
	// Subscribe listens for real-time data point updates.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataPointUpdate], error)
	// Forces a flush of the current in-memory memtable to an SSTable on disk.
	// This is primarily for testing and administrative purposes.
	ForceFlush(ctx context.Context, in *ForceFlushRequest, opts ...grpc.CallOption) (*ForceFlushResponse, error)
}

type tSDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSDBServiceClient(cc grpc.ClientConnInterface) TSDBServiceClient {
	return &tSDBServiceClient{cc}
}

func (c *tSDBServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, TSDBService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) PutBatch(ctx context.Context, in *PutBatchRequest, opts ...grpc.CallOption) (*PutBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutBatchResponse)
	err := c.cc.Invoke(ctx, TSDBService_PutBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, TSDBService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, TSDBService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) DeleteSeries(ctx context.Context, in *DeleteSeriesRequest, opts ...grpc.CallOption) (*DeleteSeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSeriesResponse)
	err := c.cc.Invoke(ctx, TSDBService_DeleteSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) DeletesByTimeRange(ctx context.Context, in *DeletesByTimeRangeRequest, opts ...grpc.CallOption) (*DeletesByTimeRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletesByTimeRangeResponse)
	err := c.cc.Invoke(ctx, TSDBService_DeletesByTimeRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TSDBService_ServiceDesc.Streams[0], TSDBService_Query_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRequest, QueryResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSDBService_QueryClient = grpc.ServerStreamingClient[QueryResult]

func (c *tSDBServiceClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, TSDBService_CreateSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) GetSeriesByTags(ctx context.Context, in *GetSeriesByTagsRequest, opts ...grpc.CallOption) (*GetSeriesByTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeriesByTagsResponse)
	err := c.cc.Invoke(ctx, TSDBService_GetSeriesByTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataPointUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TSDBService_ServiceDesc.Streams[1], TSDBService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, DataPointUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSDBService_SubscribeClient = grpc.ServerStreamingClient[DataPointUpdate]

func (c *tSDBServiceClient) ForceFlush(ctx context.Context, in *ForceFlushRequest, opts ...grpc.CallOption) (*ForceFlushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForceFlushResponse)
	err := c.cc.Invoke(ctx, TSDBService_ForceFlush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSDBServiceServer is the server API for TSDBService service.
// All implementations must embed UnimplementedTSDBServiceServer
// for forward compatibility.
//
// TSDBService defines the gRPC service for Time Series Database operations.
type TSDBServiceServer interface {
	// Put stores a new data point or a structured event for a time series. (FR1.1)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// PutBatch stores a batch of new data points.
	PutBatch(context.Context, *PutBatchRequest) (*PutBatchResponse, error)
	// Get retrieves a single data point at a specific timestamp. (FR1.3)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Delete marks a single data point for deletion. (FR1.2)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// DeleteSeries marks an entire series for deletion. (FR1.5)
	DeleteSeries(context.Context, *DeleteSeriesRequest) (*DeleteSeriesResponse, error)
	// DeleteDataPointsByTimeRange marks a time range within a series for deletion. (FR1.2)
	DeletesByTimeRange(context.Context, *DeletesByTimeRangeRequest) (*DeletesByTimeRangeResponse, error)
	// Query retrieves data points or aggregated results for a specified time range. (FR1.4)
	Query(*QueryRequest, grpc.ServerStreamingServer[QueryResult]) error
	// CreateSnapshot triggers the creation of a database snapshot. (FR5.2)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	// GetSeriesByTags retrieves a list of unique series identifiers that match the given criteria. (FR1.6)
	GetSeriesByTags(context.Context, *GetSeriesByTagsRequest) (*GetSeriesByTagsResponse, error)
	// Subscribe listens for real-time data point updates.
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[DataPointUpdate]) error
	// Forces a flush of the current in-memory memtable to an SSTable on disk.
	// This is primarily for testing and administrative purposes.
	ForceFlush(context.Context, *ForceFlushRequest) (*ForceFlushResponse, error)
	mustEmbedUnimplementedTSDBServiceServer()
}

// UnimplementedTSDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTSDBServiceServer struct{}

func (UnimplementedTSDBServiceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedTSDBServiceServer) PutBatch(context.Context, *PutBatchRequest) (*PutBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBatch not implemented")
}
func (UnimplementedTSDBServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTSDBServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTSDBServiceServer) DeleteSeries(context.Context, *DeleteSeriesRequest) (*DeleteSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeries not implemented")
}
func (UnimplementedTSDBServiceServer) DeletesByTimeRange(context.Context, *DeletesByTimeRangeRequest) (*DeletesByTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletesByTimeRange not implemented")
}
func (UnimplementedTSDBServiceServer) Query(*QueryRequest, grpc.ServerStreamingServer[QueryResult]) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedTSDBServiceServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedTSDBServiceServer) GetSeriesByTags(context.Context, *GetSeriesByTagsRequest) (*GetSeriesByTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesByTags not implemented")
}
func (UnimplementedTSDBServiceServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[DataPointUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTSDBServiceServer) ForceFlush(context.Context, *ForceFlushRequest) (*ForceFlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceFlush not implemented")
}
func (UnimplementedTSDBServiceServer) mustEmbedUnimplementedTSDBServiceServer() {}
func (UnimplementedTSDBServiceServer) testEmbeddedByValue()                     {}

// UnsafeTSDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSDBServiceServer will
// result in compilation errors.
type UnsafeTSDBServiceServer interface {
	mustEmbedUnimplementedTSDBServiceServer()
}

func RegisterTSDBServiceServer(s grpc.ServiceRegistrar, srv TSDBServiceServer) {
	// If the following call pancis, it indicates UnimplementedTSDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TSDBService_ServiceDesc, srv)
}

func _TSDBService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_PutBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).PutBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_PutBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).PutBatch(ctx, req.(*PutBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_DeleteSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).DeleteSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_DeleteSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).DeleteSeries(ctx, req.(*DeleteSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_DeletesByTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletesByTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).DeletesByTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_DeletesByTimeRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).DeletesByTimeRange(ctx, req.(*DeletesByTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TSDBServiceServer).Query(m, &grpc.GenericServerStream[QueryRequest, QueryResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSDBService_QueryServer = grpc.ServerStreamingServer[QueryResult]

func _TSDBService_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_GetSeriesByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).GetSeriesByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_GetSeriesByTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).GetSeriesByTags(ctx, req.(*GetSeriesByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TSDBServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, DataPointUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSDBService_SubscribeServer = grpc.ServerStreamingServer[DataPointUpdate]

func _TSDBService_ForceFlush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceFlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).ForceFlush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_ForceFlush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).ForceFlush(ctx, req.(*ForceFlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TSDBService_ServiceDesc is the grpc.ServiceDesc for TSDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tsdb.TSDBService",
	HandlerType: (*TSDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _TSDBService_Put_Handler,
		},
		{
			MethodName: "PutBatch",
			Handler:    _TSDBService_PutBatch_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TSDBService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TSDBService_Delete_Handler,
		},
		{
			MethodName: "DeleteSeries",
			Handler:    _TSDBService_DeleteSeries_Handler,
		},
		{
			MethodName: "DeletesByTimeRange",
			Handler:    _TSDBService_DeletesByTimeRange_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _TSDBService_CreateSnapshot_Handler,
		},
		{
			MethodName: "GetSeriesByTags",
			Handler:    _TSDBService_GetSeriesByTags_Handler,
		},
		{
			MethodName: "ForceFlush",
			Handler:    _TSDBService_ForceFlush_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _TSDBService_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _TSDBService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tsdb.proto",
}
